id: documentation-generation
name: Documentation Generation Pipeline
description: Automatically generate and maintain comprehensive project documentation
category: documentation
tier: starter
tags:
  - documentation
  - api-docs
  - code-docs
  - user-guides
  - knowledge-base
  - auto-generation
industry:
  - open-source
  - enterprise
  - saas
  - developer-tools
estimatedTime: 2-4 hours
difficulty: beginner

config:
  parallelExecution: true
  maxRetries: 2
  timeoutMinutes: 240
  customSettings:
    documentationTypes:
      - api-reference
      - code-documentation
      - user-guides
      - developer-guides
      - architecture-docs
      - deployment-guides
      - troubleshooting
    outputFormats:
      - markdown
      - html
      - pdf
      - docusaurus
      - gitbook
      - swagger
    languages:
      - english
      - technical
      - simplified
    autoUpdate:
      enabled: true
      frequency: on-change

triggers:
  - type: git-hook
    config:
      branches: [main, develop]
      events: [push, merge]
  - type: manual
    config:
      requiredInputs:
        - projectPath
        - docType
  - type: schedule
    config:
      cron: "0 2 * * 1"  # Weekly documentation update

nodes:
  # Step 1: Code Analysis
  - id: code-analysis
    name: Analyze Codebase
    description: Extract documentation from code
    type: parallel
    agent: botbie
    action: analyzeForDocs
    inputs:
      projectPath: ${inputs.projectPath}
      extract:
        - function-signatures
        - class-definitions
        - interfaces
        - type-definitions
        - constants
        - configurations
        - dependencies
      languages: auto-detect

  # Step 2: API Documentation
  - id: api-documentation
    name: Generate API Documentation
    description: Create comprehensive API reference
    type: parallel
    dependsOn: [code-analysis]
    conditions:
      - field: inputs.docType
        operator: contains
        value: api
        action: continue
    tasks:
      - agent: orchestrator
        action: generateOpenAPI
        inputs:
          routes: ${nodes.code-analysis.outputs.apiRoutes}
          format: openapi-3.0
          includeExamples: true
      - agent: orchestrator
        action: generatePostmanCollection
        inputs:
          routes: ${nodes.code-analysis.outputs.apiRoutes}
          environment: ${inputs.apiEnvironment}

  # Step 3: Component Documentation
  - id: component-docs
    name: Generate Component Documentation
    description: Document UI components and their usage
    type: action
    dependsOn: [code-analysis]
    agent: sketchie
    action: documentComponents
    conditions:
      - field: ${nodes.code-analysis.outputs.hasComponents}
        operator: equals
        value: true
        action: continue
    inputs:
      components: ${nodes.code-analysis.outputs.components}
      documentation:
        - props-table
        - usage-examples
        - playground
        - accessibility-notes
        - styling-guide
      format: ${inputs.componentDocFormat || 'storybook'}

  # Step 4: Code Comments Enhancement
  - id: enhance-comments
    name: Enhance Code Comments
    description: Add missing documentation to code
    type: action
    dependsOn: [code-analysis]
    agent: botbie
    action: enhanceCodeComments
    inputs:
      files: ${nodes.code-analysis.outputs.uncommentedFiles}
      style: ${inputs.commentStyle || 'jsdoc'}
      enhance:
        - function-descriptions
        - parameter-docs
        - return-values
        - examples
        - edge-cases
        - complexity-notes

  # Step 5: Architecture Documentation
  - id: architecture-docs
    name: Generate Architecture Documentation
    description: Create system architecture diagrams and docs
    type: parallel
    dependsOn: [code-analysis]
    tasks:
      - agent: orchestrator
        action: generateArchDiagrams
        inputs:
          type: c4-model
          levels:
            - context
            - container
            - component
          format: mermaid
      - agent: orchestrator
        action: documentPatterns
        inputs:
          patterns: ${nodes.code-analysis.outputs.architecturePatterns}
          includeRationale: true

  # Step 6: User Guides
  - id: user-guides
    name: Generate User Guides
    description: Create end-user documentation
    type: action
    dependsOn: [component-docs]
    agent: orchestrator
    action: generateUserGuides
    conditions:
      - field: inputs.includeUserGuides
        operator: not_equals
        value: false
        action: continue
    inputs:
      audience: ${inputs.targetAudience || 'general'}
      sections:
        - getting-started
        - features-overview
        - step-by-step-tutorials
        - common-tasks
        - faq
        - troubleshooting
      tone: ${inputs.documentationTone || 'friendly'}

  # Step 7: Developer Guides
  - id: developer-guides
    name: Generate Developer Guides
    description: Create developer-focused documentation
    type: parallel
    dependsOn: [architecture-docs]
    tasks:
      - agent: orchestrator
        action: generateSetupGuide
        inputs:
          includePrerequisites: true
          platforms:
            - local-development
            - docker
            - cloud-deployment
      - agent: orchestrator
        action: generateContributionGuide
        inputs:
          sections:
            - code-standards
            - pr-process
            - testing-requirements
            - commit-conventions

  # Step 8: Code Examples
  - id: code-examples
    name: Generate Code Examples
    description: Create practical code examples
    type: action
    dependsOn: [api-documentation]
    agent: debugearth
    action: generateExamples
    inputs:
      apis: ${nodes.api-documentation.outputs.endpoints}
      languages:
        - javascript
        - python
        - curl
        - java
      scenarios:
        - basic-usage
        - authentication
        - error-handling
        - pagination
        - webhooks

  # Step 9: Changelog Generation
  - id: changelog
    name: Generate Changelog
    description: Create version history documentation
    type: action
    dependsOn: [code-analysis]
    agent: orchestrator
    action: generateChangelog
    inputs:
      fromCommits: true
      format: keep-a-changelog
      sections:
        - added
        - changed
        - deprecated
        - removed
        - fixed
        - security

  # Step 10: Search Index
  - id: search-index
    name: Build Search Index
    description: Create searchable documentation index
    type: action
    dependsOn: [user-guides, developer-guides]
    agent: orchestrator
    action: buildSearchIndex
    inputs:
      content: ${aggregateAllDocs()}
      engine: ${inputs.searchEngine || 'algolia'}
      options:
        - fuzzy-search
        - synonyms
        - filters
        - facets

  # Step 11: Documentation Site
  - id: doc-site
    name: Generate Documentation Site
    description: Build complete documentation website
    type: action
    dependsOn: [search-index]
    agent: orchestrator
    action: buildDocSite
    inputs:
      platform: ${inputs.docPlatform || 'docusaurus'}
      theme: ${inputs.docTheme || 'default'}
      features:
        - versioning
        - i18n-ready
        - dark-mode
        - search
        - analytics
      navigation: auto-generate

  # Step 12: Quality Check
  - id: quality-check
    name: Documentation Quality Check
    description: Validate documentation completeness and quality
    type: parallel
    dependsOn: [doc-site]
    tasks:
      - agent: botbie
        action: checkDocQuality
        inputs:
          checks:
            - broken-links
            - missing-sections
            - outdated-content
            - grammar-spelling
            - code-validity
      - agent: orchestrator
        action: checkCoverage
        inputs:
          required: ${inputs.requiredDocumentation}
          threshold: 90

outputs:
  - name: Documentation Site
    type: artifact
    format: html
    destination: ${outputs.sitePath}/index.html
  
  - name: API Reference
    type: report
    format: openapi
    destination: ${outputs.apiPath}/openapi.yaml
  
  - name: Component Storybook
    type: artifact
    format: html
    destination: ${outputs.storybookPath}/index.html
  
  - name: PDF Documentation
    type: report
    format: pdf
    destination: ${outputs.pdfPath}/documentation.pdf
  
  - name: Markdown Docs
    type: artifact
    format: zip
    destination: ${outputs.mdPath}/markdown-docs.zip
  
  - name: Changelog
    type: report
    format: markdown
    destination: ${outputs.docsPath}/CHANGELOG.md
  
  - name: Coverage Report
    type: report
    format: json
    destination: ${outputs.reportPath}/doc-coverage.json

metrics:
  successRate: 98.3
  averageExecutionTime: 120
  totalExecutions: 9876
  userRating: 4.6
  documentationCoverage: 92.5
  autoGenerationRate: 85.3